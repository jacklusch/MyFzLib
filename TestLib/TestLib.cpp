// TestLib.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"

#include "static_Function.h"
//#include "../MyFzLib/mhook-lib/mhook.h"
//#include <Windows.h>
//HOOK库测试成功
#include <mmsystem.h>
#include <Psapi.h>

#pragma comment(lib,"Psapi.lib")
#pragma comment(lib,"Winmm.lib")
//
union CheckBig
{
	unsigned int _32All;
	struct 
	{
		unsigned Lock : 1;
		unsigned Reserved : 31;
	}Feld;
};
union MyWord
{
	unsigned short _word;
	struct 
	{
		BYTE High;
		BYTE Low;
	}FEILD;
};
typedef int (WINAPI *MymessageBox)(HWND,LPCSTR,LPCSTR,UINT);
int WINAPI NewMeesageBox(HWND, LPCSTR, LPCSTR, UINT);

MymessageBox oldMessage;
//int main()
//{
//	//MessageBoxA();
//	HMODULE hm=LoadLibraryA("user32.dll");
//	if (hm==NULL)
//	{
//		DbgPrtA("LoadLibraryA失败");
//		return 0;
//	}
//	oldMessage = (MymessageBox)GetProcAddress(hm, "MessageBoxA");
//	if (oldMessage == NULL)
//	{
//		DbgPrtA("oldMessage失败");
//		return 0;
//	}
//	Mhook_SetHook((PVOID*)&oldMessage,(PVOID) NewMeesageBox);
//	int ad=MessageBoxA(0, "sssss", "1111", 1);
//	int * bb = &ad;
//	int c = dd(bb);
//	SendMessageA(0,0,0,0);
//    return 0;
//}
//int WINAPI NewMeesageBox(HWND hwnd, LPCSTR text, LPCSTR caption, UINT id)
//{
//	DbgPrtA("NewMeesageBox %08x...%s....%s...%d", hwnd,text,caption,id);
//	int retad = oldMessage(hwnd, text, caption, id);
//	DbgPrtA("oldMessage返回了%d", retad);
//	return retad += 1;
//}
//typedef struct _CLIENT_ID
//{
//	PVOID UniqueProcess;
//	PVOID UniqueThread;
//} CLIENT_ID, *PCLIENT_ID;
//typedef struct _UNICODE_STRING {
//	USHORT Length;
//	USHORT MaximumLength;
//	PWCH   Buffer;
//} UNICODE_STRING,*PUNICODE_STRING;
//typedef struct _OBJECT_ATTRIBUTES {
//	ULONG           Length;
//	HANDLE          RootDirectory;
//	PUNICODE_STRING ObjectName;
//	ULONG           Attributes;
//	PVOID           SecurityDescriptor;
//	PVOID           SecurityQualityOfService;
//} OBJECT_ATTRIBUTES,*POBJECT_ATTRIBUTES;
//#include   <windows.h>   

//_Out_ PHANDLE            ThreadHandle,
//_In_  ACCESS_MASK        DesiredAccess,
//_In_  POBJECT_ATTRIBUTES ObjectAttributes,
//_In_  PCLIENT_ID         ClientId
//typedef int (WINAPI *ntopenthread)(PHANDLE ThreadHandle, DWORD DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
//ntopenthread ntOpenThread;
//
//LONG PvectoredExceptionHandler(
//	_EXCEPTION_POINTERS *ExceptionInfo
//);
//DWORD dwOld = 0;
//DWORD dwAddr = 0;
void test();
int main()
{
	////MODULEINFO  exeinfo;
	////MessageBoxA(0,"11111","123123",0);
	////HANDLE hm = GetCurrentProcess();
	////HMODULE hm1 = GetModuleHandle(NULL);
	//////GetModuleInformation(hm, hm1, &exeinfo, sizeof(MODULEINFO));
	////char * szbuffer[0x10];
	////RtlZeroMemory(szbuffer, 0x10);
	////DWORD dwReaded = 0;
	//////ReadProcessMemory(hm, (LPCVOID)0x400000, szbuffer, 0x10, &dwReaded);
	//unsigned char data[605] = {
	//	0x5D, 0x02, 0x4E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x02, 0x00, 0x00, 0x4D, 0x42, 0x3E, 0x02,
	//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x80, 0x00,
	//	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x05, 0x37, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
	//	0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x01, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0xE0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x78, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x7E,
	//	0x10, 0x01, 0x10, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xB8, 0x00, 0x00, 0x00, 0x7F,
	//	0xF0, 0x03, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x80, 0x00, 0x00, 0x00, 0x7F,
	//	0xF0, 0x80, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC0, 0x00, 0x00, 0x00, 0x10,
	//	0x00, 0x88, 0x80, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xC0, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x80, 0xC0, 0x00, 0x1C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x61, 0xC0, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x01, 0x1C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x31, 0xE0, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xE0, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x01, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xE0, 0x01, 0x00, 0x00, 0x00,
	//	0x08, 0x00, 0x00, 0x00, 0x70, 0x08, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE0, 0x00, 0x00, 0x00, 0x00,
	//	0x1C, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x80, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF1, 0x40, 0x00, 0x00, 0x00,
	//	0x00, 0x80, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0x8C, 0x00, 0x00, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x08, 0x00, 0x0F, 0x00,
	//	0x00, 0x87, 0x52, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF8,
	//	0x00, 0x0E, 0x40, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07,
	//	0xD2, 0xC0, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
	//	0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x00, 0x02,
	//	0x04, 0xC0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0x86, 0x00, 0x00, 0x00, 0x00,
	//	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x13, 0x4C, 0x00, 0x00, 0x00, 0x00,
	//	0x00, 0xC0, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	//};

	//char  szCode[] = "894D??8A45188845F8807DF800";
	//DWORD dwPid = FindProcess("TUClient.exe");
	//DWORD dwTime1 = GetTickCount();
	//DWORD dwAddr = Fun_FindIdentByModule2(dwPid,"TUClient.exe", szCode,0x49,1,CALL);
	//DWORD dwTime2 = GetTickCount()- dwTime1;
	////DWORD dwAddr = Fun_FindIdentByModule(NULL, szCode);
	//printf("找到明文发包call了 地址=%08X ,用时:%d毫秒\r\n", dwAddr,dwTime2);

	//getchar();

	//_In_      SYSTEM_INFORMATION_CLASS SystemInformationClass,
	//	_Inout_   PVOID                    SystemInformation,
	//	_In_      ULONG                    SystemInformationLength,
	//	_Out_opt_ PULONG                   ReturnLength
	HANDLE hjob = CreateJobObject(NULL, "test");
	if (hjob!=NULL)
	{
		JOBOBJECT_BASIC_UI_RESTRICTIONS jobstr = { 0 };
		jobstr.UIRestrictionsClass = JOB_OBJECT_UILIMIT_HANDLES; //进制访问
		STARTUPINFO st = { 0 };
		PROCESS_INFORMATION ps = { 0 };
		SetInformationJobObject(hjob, JobObjectBasicUIRestrictions, &jobstr, sizeof(JOBOBJECT_BASIC_UI_RESTRICTIONS));
		::CreateProcess(".\\testExe.exe", NULL, NULL, NULL, FALSE, CREATE_DEFAULT_ERROR_MODE| CREATE_SUSPENDED, NULL, NULL, &st, &ps);
		AssignProcessToJobObject(hjob, ps.hProcess);
		ResumeThread(ps.hThread);
		printf("error!");
		getchar();
	}
	std::string strReg = read_reg_sz("Software\\Tencent\\LOL", "InstallPath");
	ProcessResult prlst = GetProcessByName("explorer.exe");
 
	return 0;
}
void test()
{
	int i = 1;
}